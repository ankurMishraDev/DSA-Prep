Everything that starts with a capital letter in java in a class.

For String data type variables java has a separate memory location inside java heap memory it is called as
Java Pool

The java pool allocate memory to the string data type variables.

Whenever a String variable is initialized with a value . The value is first check inside the java pool for it's
availability , if a similar value is already present in the java pool then , NO new value is stored in java pool and the
pool provide a reference address of the existence value to the newly initialized variable so that it can point towards
that value whenever he want to access it.
e.g.[  String first = "ankur"
String second = "ankur"   ]
in this example two different variable (first) and (second) of String type initialized with same value as "ankur" , but
in java pool the value "ankur" get allocated only once during the (first) initialization, when the variable (second)
also get initialized with same value then java pool provide the reference address of value to the (second) variable.
Hence both the variable can points towards the same value inside the java heap memory.

The main function of java pool is to prevent memory allocation of the same value again and again, which has been
initialized with different variable and objects.

Immutability is very important for String data types as if more than one variable initialized with same object then they
actually pointing towards a same object and if one variable modified the object value then it will also be changed for
the other variable. Hence, immutability act as a security function for String classes

String objects are immutable, they can't be changed. If we want to modify a variables value then we have to make a new
object inside java pool so that it can be used by the reference variable.
e.g. [ String name = "ankur";
name = "rahul"; ]
in this example the value of (name) variable is changed from "ankur" to "rahul" but actually the value "ankur" does not
modified from "ankur" to "rahul", the (name) variable actually points towards different value in memory named "rahul".

e.g. [ String name = "ankur"; name = "rahul"; ] here as the (name) variable now point towards "rahul" and no other
variable is pointing towards the "ankur" value hence this value get destroyed by the garbage collector and free the
memory space for further uses.

Comparison operator (==) can be used to check whether two different objects having same value are pointing towards the
same value or not. e.g [  String a = "ankur";
                                 String b = "ankur";

                         //        comparison of both the strings
                                 System.out.println( a == b);   ]
here the output is came out as "true", hence it's proved that both the variable are pointing towards the same value in
the java pool.

How to create different object of same value?
[ String a = new String("ankur");
String b = new String("ankur");
//comparison of both the strings
System.out.println( a == b);  ] here the output is came out as "false", hence it shows that both variable (a) and (b)
are not pointing towards same value.
The (new) keyword is used to create a separate object of same value to store in the memory. String Objects declared with
(new) keyword are stored in the heap memory in place of java pool.

ArrayList is a class which is used to make specific objects that shows array properties. We use Arraylist cause it
provide wide range of functions that can be used for specific purposes. We can access these functions with help of (.)
keyword. e.g. [
public class Main{
public static void main(String [] args){
ArrayList number = new ArrayList(;
number.add(36);
System.out.println(number);
}}
] here the object (number) using add function of ArrayList by accessing it using ( . ) keyword.
Similarly the [ System.out.println();] is also does print operation with the help of different methods combined
them with (.) keyword.

There are many format specifier we can use. Here are some common ones:
%c - Character
%d - Decimal number (base 10)
%e - Exponential floating-point number
%f - Integer (base 10)
%o - Octal number (base 8)
%s - String
%u - Unsigned decimal (integer) number
%x - Hexadecimal number (base 16)
%t - Date/time

[ 'a' + 'b' ] when addition operator is used between two characters, addition operation takes place, here the characters
are firstly converted into their respective ASCII numbers and addition happened.

[ "a" + "b" ] when addition operator is used between two strings, concatenation operation takes place, here the output
of the line is ( ab ).

When a integer is concatenated with a String using (+) operator, then that part completely work as a String.
[System.out.println("a" + 1)//this is same as after a few steps: "a"+"1" ] here the output of this line is (a1) but
basically here for concatenation the integer 1 is first converted into a string then concatenation happens.

In java, the (+) operator can only be use for expression where one of the operands should be a String type.
[System.out.println(new Integer{value: 84} + "  " + new ArrayList<>(); ] the (" ") works as a String.

Operator (+) is the only operator in java that has been used for String operations.

[
 public class performance {
      public static void main(String[] args) {
          String series = " ";
          for (int i = 0; i < 26; i++) {
              char ch = (char)('a'+ i);
              series = series + ch;
              /* during this loop execution by every iteration the value gets changed and we know that Strings are immutable
                hence the previous value doesn't change actually a new every has been created every time and the rest of
                the previous value get destroyed by garbage collector since they aren't pointing towards any, thing.
               */
          }
          System.out.println(series);
      }
  }
]

StringBuilder is a data type that can be used to overcome limitations of String data type.
Since Strings are immutable so every time we have to change the value of object then we have to create a separate new
value for the object but in case of StringBuilder it provide wide range of functionality for specific purposes.
[
public class SB {
    public static void main(String[] args) {
        StringBuilder string = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            char ch = (char)('a'+ i);
            string.append(ch);
            /* during this loop execution by every iteration the value gets changed, and we know that StringBuilder
            overcome the immutable limitation of Strings hence there is no new object has been created for the object
            value after every iteration.
             */
        }
        System.out.println(string.toString());
    }
}
]

