BUBBLE SORT
-> Use two pointers to point at two adjacent positions of data structure and then compare the elements at pointers on the
basis of greater than or less from each other. If the relation is getting verified, then perform swapping between the two
data structure elements and perform this operation n-1 times, where n is the size of the data.
-> We can reduce the no. of comparison after each successive sorted index as the smallest or largest element will be placed
at its respective index based on the type of comparison.
->Complexities:
space complexity: o(1), constant as no extra space required, i.e. copying the array or anything not required.
time complexity:
(a) Best case O(n), where array is sorted
(b) Worst case o(n^2), where array is sorted in opposite order

SELECTION SORT
-> Here we use two pointers, one to point at largest or smallest index of the data structure and another to point at
largest or smallest element of the given data structure, for indexing pointer we will use data structure length relations,
and for finding the largest element we perform linear search on the changing length of data structure. After finding the
last index and largest element index will swap their values.
-> After a successive iteration over the data structure, the last or first element will be automatically get sorted, hence
we don't need to consider these index element, hence we will shift the last index pointer by 1 value after each iteration
which will also save the operational overhead of unnecessary comparisons.
-> Time Complexities:
(a) Best case O(n^2);
(b) worst case O(n^2);

INSERTION SORT
-> Insertion sort is a straightforward sorting algorithm that sorts a list by building a sorted portion one item at a time.
In Java, it works much like organizing cards in your handâ€”picking each new card and inserting it into the correct spot
among the already ordered cards.
-> How Insertion Sort Works
The first element of the array is considered sorted.
You pick the next element (called the "key") and compare it with elements to its left.
Shift elements that are greater than the key one position to the right to make space.
Insert the key into its correct position.
Repeat for all elements until the array is sorted
-> Complexities:
  (a) Best case O(n) for an already sorted array
  (b) Average and worst case: O(n^2), where n is number of elements
  (c) Space complexity: O(1) (in-place)
  (d) Stable sort: maintains the order of equal elements
  (e) Most efficient: on small or nearly sorted arrays

CYCLIC SORT
-> Cyclic sort (also known as cycle sort) is an efficient, in-place sorting algorithm designed primarily for sorting arrays
where the elements are in a known range (for example, the numbers 1 to n with no duplicates). Its main advantage is that
it minimizes the number of memory writes, making it especially useful when write operations are expensive or limited.
-> How Cyclic Sort Works
For each element in the array, find its correct position by checking where it should be.
If it's not in the correct position, swap it with the element currently at its correct position.
Repeat this process until every element is in its correct place.
-> Key Properties of Cyclic Sort
   Best use case: sorting arrays containing 1 to n (distinct) integers.
   In-place: requires no extra memory.
   Unstable: relative order of equal elements is not preserved.
   Number of writes: minimized, each element is written only once to its correct position.
   Time complexity: O(n)
   Space complexity: O(1)
