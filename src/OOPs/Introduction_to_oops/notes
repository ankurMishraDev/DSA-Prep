In Java, classes and objects are basic concepts of Object Oriented Programming (OOPs) that are used to represent
real-world concepts and entities. The class represents a group of objects having similar properties and behavior.
For example, the animal type Dog is a class while a particular dog named Tommy is an object of the Dog class.

Java Classes
A class in Java is a set of objects which shares common characteristics/ behavior and common properties/ attributes.
It is a user-defined blueprint or prototype from which objects are created. For example, Student is a class while a
particular student named Ravi is an object.

Properties of Java Classes
Class is not a real-world entity. It is just a template or blueprint or prototype from which objects are created.
Class does not occupy memory.
Class is a group of variables of different data types and a group of methods.
A Class in Java can contain:
Data member
Method
Constructor
Nested Class
Interface

Constructors are used for initializing new objects. Fields are variables that provide the state of the class and its
objects, and methods are used to implement the behavior of the class and its objects.
There are various types of classes that are used in real-time applications such as nested classes,
anonymous classes, and lambda expressions.

Java Objects
An object in Java is a basic unit of Object-Oriented Programming and represents real-life entities. Objects are the
instances of a class that are created to use the attributes and methods of a class.  A typical Java program creates
many objects, which as you know, interact by invoking methods. An object consists of :
State: It is represented by attributes of an object. It also reflects the properties of an object.
Behavior: It is represented by the methods of an object. It also reflects the response of an object with other objects.
Identity: It gives a unique name to an object and enables one object to interact with other objects.

A Wrapper class in Java is a class whose object wraps or contains primitive data types. When we create an object to a
wrapper class, it contains a field and in this field, we can store primitive data types. In other words, we can wrap a
primitive value into a wrapper class object. Letâ€™s check on the wrapper classes in Java with examples:

Need of Wrapper Classes
There are certain needs for using the Wrapper class in Java as mentioned below:

They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a
method (because primitive types are passed by value).
The classes in java.util package handles only objects and hence wrapper classes help in this case also.
Data structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not
primitive types.
An object is needed to support synchronization in multithreading.

Advantages of Wrapper Classes
Collections allowed only object data.
On object data we can call multiple methods compareTo(), equals(), toString()
Cloning process only objects
Object data allowed null values.
Serialization can allow only object data.