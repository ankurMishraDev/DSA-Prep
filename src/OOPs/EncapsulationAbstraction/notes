-> Encapsulation means wrapping up the implementation of the data members and methods in a class.

-> In an object-oriented programming language like Java, you achieve encapsulation by hiding details using the
accessibility modifiers (public, protected, private, plus no modifier which implies package-private). With these levels
of accessibility, you control the level of encapsulation, the less restrictive the level, the more expensive change is
when it happens and the more coupled the class is with other dependent classes (i.e. user classes and subclasses).

-> We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use
setter and getter methods to set and get the data in it.

-> Advantage of Encapsulation in Java:
   By providing only a setter or getter method, you can make the class read-only or write-only. In other words, you can
   skip the getter or setter methods.
   It provides you the control over the data. Suppose you want to set the value of id which should be greater than 100
   only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers in
   the setter methods.
   It is a way to achieve data hiding in Java because other class will not be able to access the data through the
   private data members.
   The encapsulate class is easy to test. So, it is better for unit testing.

-> Sample program [
//A Java class which is a fully encapsulated class.
//It has a private data member and getter and setter methods.
package com.javatpoint;
public class Student{
//private data member
private String name;
//getter method for name
public String getName(){
return name;
}
//setter method for name
public void setName(String name){
this.name=name
}
}
//A Java class to test the encapsulated class.
package com.javatpoint;
class Test{
public static void main(String[] args){
//creating instance of the encapsulated class
Student s=new Student();
//setting value in the name member
s.setName("vijay");
//getting value of the name member
System.out.println(s.getName());
}
}
      ]

-> Sample program for read only purpose you can't change the value of variables:
[          //A Java class which has only getter methods.
 public class Student{
 //private data member
 private String college="AKG";
 //getter method for college
 public String getCollege(){
 return college;
 }
 }
       ]

-> Sample program for write only purpose you can't read the initial value of variables:
[
  //A Java class which has only setter methods.
  public class Student{
  //private data member
  private String college;
  //getter method for college
  public void setCollege(String college){
  this.college=college;
  }
  }
  ]

-> Encapsulation solves the implementation level issues.

-> Complete program to understand encapsulation and to use getter and setter methods:
[ //A Account class which is a fully encapsulated class.
  //It has a private data member and getter and setter methods.
  class Account {
  //private data members
  private long acc_no;
  private String name,email;
  private float amount;
  //public getter and setter methods
  public long getAcc_no() {
      return acc_no;
  }
  public void setAcc_no(long acc_no) {
      this.acc_no = acc_no;
  }
  public String getName() {
      return name;
  }
  public void setName(String name) {
      this.name = name;}
  public String getEmail() {
      return email; }
  public void setEmail(String email) {
      this.email = email; }
  public float getAmount() {
      return amount; }
  public void setAmount(float amount) {
      this.amount = amount;
  } }

  //A Java class to test the encapsulated class Account.
  public class TestEncapsulation {
  public static void main(String[] args) {
      //creating instance of Account class
      Account acc=new Account();
      //setting values through setter methods
      acc.setAcc_no(7560504000L);
      acc.setName("Sonoo Jaiswal");
      acc.setEmail("sonoojaiswal@javatpoint.com");
      acc.setAmount(500000f);
      //getting values through getter methods
      System.out.println(acc.getAcc_no()+" "+acc.getName()+" "+acc.getEmail()+" "+acc.getAmount());
  } }
  ]

-> Encapsulation is used to hide the complexity or programs.

-> Abstraction means hiding unnecessary details and showing only functional information to the user.

-> Example case:sending SMS where you type the text and send the message. You don't know the internal processing about
the message delivery.

-> Abstraction lets you focus on what the object does instead of how it does it.

-> Abstraction solves the design level issues.

-> There are two ways to achieve abstraction in java:
   Abstract class (0 to 100%)
   Interface (100%)

-> Data hiding is used for data security along with hiding the complexity of program.

