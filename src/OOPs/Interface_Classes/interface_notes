->Interface methods do not have a body - the body is provided by the "implement" class. On implementation of an
interface, you must override all of its methods. Interface methods are by default abstract and public.
Interface attributes are by default public , static and final.

->When you run a function in child class and it exists in the parent class then during compile time both the classes
should be available while compilation process is undertaken.

->Interface contradict the basic hierarchy classification of method accessibility ,in Interface irrespective of the
position of a class any one can call any method/function wherever it is declared.

->By using interface, two classes that are unrelated to each other can use share same method/function.

->Uses of Interfaces in Java are mentioned below:
  It is used to achieve total abstraction.
  Since java does not support multiple inheritances in the case of class, by using an interface it can achieve
  multiple inheritances.
  Any class can extend only 1 class but can any class implement an infinite number of interface.
  It is also used to achieve loose coupling.
  Interfaces are used to implement abstraction.

->So the question arises why use interfaces when we have abstract classes?
 The reason is, abstract classes may contain non-final variables, whereas variables in the interface are final, public,
  and static.
  [
  // A simple interface
  interface Player
  {
      final int id = 10;
      int move();
  }
  ]

->Difference Between Class and Interface
  Although Class and Interface seem the same there have certain differences between Classes and Interface.
  The major differences between a class and an interface are mentioned below:
>Class
In class, you can instantiate variables and create an object.
A class can contain concrete(with implementation) methods.
The access specifiers used with classes are private, protected, and public.
>Interface
In an interface, you canâ€™t instantiate variables and create an object.
The interface cannot contain concrete(with implementation) methods.
In Interface only one specifier is used- Public.
[Implementation: To implement an interface we use the keyword implements ]

-> Sample program [
// Java program to demonstrate working of interface
import java.io.*;
interface In1 {
	// public, static and final
	final int a = 10;
	// public and abstract
	void display();
}
// A class that implements the interface.
class TestClass implements In1 {
	// Implementing the capabilities of
	// interface.
	public void display(){
	System.out.println("Geek");
	}
	// Driver Code
	public static void main(String[] args)
	{
		TestClass t = new TestClass();
		t.display();
		System.out.println(a);
	}
}
OUTPUT: Geek
10
]